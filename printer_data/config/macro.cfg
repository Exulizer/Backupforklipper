


[gcode_macro MESH]
gcode:
      BED_MESH_CLEAR
      G28
      Z_TILT_ADJUST
      BED_MESH_CALIBRATE
      BED_MESH_PROFILE SAVE=Mesh
      G1 X0 Y0 Z5 F4000
      BED_MESH_PROFILE LOAD=Mesh



[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 4.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}



[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(0)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(0)|float %}
    G28
    M140 S{BED_TEMP}
    Z_TILT_ADJUST 
    G28 Z
    M190 S{BED_TEMP}
    # mesh_bed leveling
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    # Reset Extruder
    G92 E0
    # Move to start position
    G1 X10 Y250 Z0.5 F10000
    #M190 S{BED_TEMP}
    M109 S{EXTRUDER_TEMP}
    G1 Z0.4
    # Draw the first line
    G1 X10 Y120 Z0.4 F3000.0 E35
    # Reset Extruder
    G92 E0
    # Move Z Axis up
    G1 Z2.0 F50000



[gcode_macro END_PRINT]
gcode:
    M400                          ; Clear Buffer
    M104 S0                       ; turn off extruder
    M140 S0                       ; turn off bed                            
    G92 E0                        ; reset extruder
    G91                           ; relative positioning
    G1 Z2 F40000 E-5 F40000       ; move nozzle to remove stringing       
    G28 X                         ; home x-axis
    M106 S0                       ; turn off fan  
    G90                           ; absolute positioning
    M84                           ; Disable steppers
    BED_MESH_CLEAR                ; Clear BedMesh

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  G91		  #relative positioning
  # G1 E-.1 
  G1 Z2 F40000 E-5 F40000
  #G1 Z10 Y50 F3000	#Z axis up 10mm, Y out 50mm
  G90		  #absolute positioning
  G28 X 	#home X axis
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  BASE_CANCEL_PRINT



[gcode_macro Heat_Hotend]
gcode:
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=200


[gcode_macro Heat_Bed]
gcode:
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=65

  

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}

    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}

    {action_respond_info(out|join("\n"))}


    
[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
#description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
    ##### set park positon for x and y #####
    # default is your max position from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set z_park_delta = 2.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
    {% else %}
    {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
    {% else %}
    {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
    {% else %}
    {action_respond_info("Printer not homed")}
    {% endif %}



[gcode_macro M600]
 #Filament change
 #default_parameter_X: 50
 #default_parameter_Y: 0
 #default_parameter_Z: 10
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-150 F1000
    M300 S299 P200
    M300 S299 P200
    M300 S299 P200
    M300 S299 P200
    M300 S299 P200
    RESTORE_GCODE_STATE NAME=M600_state


#[gcode_macro TOGGLE_LEDLIGHTS]
#gcode:
#  SET_PIN PIN=LEDlights VALUE={(not printer['output_pin LEDlights'].value)|int}


[gcode_macro ACCELL_TEST_X]
gcode:
    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(250)|float * 60 %}

    {% set inset = 10.0|float %} 
    {% set accel = 5000|int %} 
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
    G1 Z5
    G1 X{10} Y{10} F{100} 

    {% for INTERVAL in range(steps) %}
    {% set eff = accel + (INTERVAL * 1000) %} 
    SET_VELOCITY_LIMIT ACCEL={eff} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
    G1 X{minX} Y{minY} F{speed}  
    G1 X{maxX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 


[gcode_macro ACCELL_TEST_Y]
gcode:
    {% set steps = params.STEPS|default(50)|int %}
    {% set speed = params.VELOCITY|default(100)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 5000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
    G1 Z5
    G1 X{10} Y{10} F{100} 

    {% for INTERVAL in range(steps) %}
    {% set eff = accel + (INTERVAL * 1000) %} 
    SET_VELOCITY_LIMIT ACCEL={eff} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
    G1 X{maxX} Y{minY} F{speed}  
    G1 X{minX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 


[gcode_macro MATERIAL_PA]
gcode:
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}
    {% set TEXT ="Setting PA for " + MATERIAL %}
    {% set PLA = printer["gcode_macro MACROS_VARS"].pla_pa|default(0)%}
    {% set PET = printer["gcode_macro MACROS_VARS"].pet_pa|default(0)%}
    {% set ABS = printer["gcode_macro MACROS_VARS"].abs_pa|default(0)%}
    {% set ASA = printer["gcode_macro MACROS_VARS"].asa_pa|default(0)%}
    {% set ABSX = printer["gcode_macro MACROS_VARS"].absx_pa|default(0)%}
    {% set NY = printer["gcode_macro MACROS_VARS"].ny_pa|default(0)%}
    {% set XPETG = printer["gcode_macro MACROS_VARS"].xp_pa|default(0)%}
    {% if MATERIAL == "PLA" %}
    SET_PRESSURE_ADVANCE ADVANCE={PLA}
    {% elif MATERIAL == "PET" %}
    SET_PRESSURE_ADVANCE ADVANCE={PET}
    {% elif MATERIAL == "ABS" %}
    SET_PRESSURE_ADVANCE ADVANCE={ABS}
    {% elif MATERIAL == "ASA" %}
    SET_PRESSURE_ADVANCE ADVANCE={ASA}
    {% elif MATERIAL == "ABSX" %}
    SET_PRESSURE_ADVANCE ADVANCE={ABSX}
    {% elif MATERIAL == "NY" %}
    SET_PRESSURE_ADVANCE ADVANCE={NY}
    {% elif MATERIAL == "XPETG" %}
    SET_PRESSURE_ADVANCE ADVANCE={XP}
    {% else %}
    {% endif %}
   


[gcode_macro MACROS_VARS]
variable_pla_pa: 0.0250
variable_pet_pa: 0.0650
variable_abs_pa: 0.2600
variable_asa_pa: 0.1500
variable_absx_pa: 0.0350
variable_ny_pa: 0.01500
variable_xp_pa: 0.0800

gcode:



#SET_PRESSURE_ADVANCE [EXTRUDER=<config_name>]
#[ADVANCE=<pressure_advance>]
#[SMOOTH_TIME=<pressure_advance_smooth_time>]